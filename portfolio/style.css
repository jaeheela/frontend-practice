@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&family=Varela+Round&display=swap');

/* 웹브라우저의 기본 값 대신에 우리가 정의한 값으로 CSS를 적용하기 위해서 웹브라우저의 기본 스타일 시트 초기화 */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

a,
a:visited,
a:link {
    color: inherit;
    text-decoration: none;
}

li {
    list-style: none;
}




/*[.container] 너비 지정 - [.container] 속성자는 프로젝트 전반에 걸쳐 사용되는 중요한 클래스 속성자임 */
.container {
    width: 1140px; /*기준 너비를 유지해줌* (기준 너비: 1140px로 설정) */
    margin: 0 auto; /* 수평 방향에서 중앙에 위치하게 됨 */
}


/* 
프로젝트의 헤더는 스크롤해서 화면을 내리더라도 항상 상단에 고정할 것임
그러려면  -> [position: fixed]로 지정 필요
하지만 프로젝트 완성본처럼 부드럽게 보이려면 자바스크립트가 필요하므로
일단 absolute 값으로 지정함

position 속성을 지정하면 모든 HTML 요소의 [z-index: 0] 이 기본값임
그러나 스크롤했을 때 다른 요소 밑에 가려서 안 보이는 일이 없도록 
[헤더의 z-index 속성값을 0보다 크게 주기]
이 프로젝트에서는 [z-index: 1] [padding: 1rem] 으로 지정

텍스트 색상은 나중에 흰색으로 바꾸지만, 지금은 검은색(black)으로 지정
텍스트색상는 상속되는 속성이라서 부모 태그에 적용하면 하위 태그에 자동으로 상속됨
*/
header {
    width: 100%;
    position: fixed;
    top: 0;
    z-index: 1;
    padding: 1rem;
    background-color: #000;
}

header .container {
    display: flex; /*헤더영역의 자식요소들이 한 줄로 배치*/
    justify-content: space-between; /*헤더영역의 자식요소들이 각각 완쪽과 오른쪽 끝으로 배치*/
    align-items: center /*자식요소들의 수직정렬*/
    width: 100%;
}




/* 헤더 영역의 여백, 글꼴 크기 지정하기 */
header nav ul {
    display: flex;
}
header nav ul li {
    margin: 10px;
}
header button {
    background-color: transparent;
    border-style: none;
    cursor: pointer;
    color: white;
}
header h1 button {
    font-size: 2rem;
    font-weight: bold;
}
header nav ul li button {
    font-size: 1.2rem;
}
/* 헤더 영역의 여백, 글꼴 크기 지정하기 끝 */



main {
    width: 100%;
    height: 100vh;
    display: flex;
    justify-content: center; /* 메인 영역 아이템들의 정렬=중앙 */
    align-items: center; /*수직 방향에서 요소들이 중앙에 위치하도록 지정*/
    text-align: center; /*텍스트도 중앙 정렬하기 위해 지정*/
    
    
    /* 메인 영역 배경에 프로필 이미지 넣기 + 검정으로 덮기 : 웹 페이지의 메인 영역에 프로필 이미지만 넣어도 굉장히 현대적인 느낌을 줌 */
    /* 배경색이 이미지를 덮는 효과 */
    background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://images.unsplash.com/photo-1425082661705-1834bfd09dca?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1476&q=80');
    /* background-image: linear-gradient(rgba(0,0,0,0.8) , rgba(0,0,0,0.8));
    background-image: url('https://images.unsplash.com/photo-1425082661705-1834bfd09dca?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1476&q=80'); */
    background-position: center;
    background-size: cover;
    /* background: linear-gradient(rgba(0,0,0,0.8) , rgba(0,0,0,0.8)), url('https://images.unsplash.com/photo-1425082661705-1834bfd09dca?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1476&q=80') center; */
    color: white;
}


/*각 텍스트의 크기와 margin 지정하기*/
main h4 {
    font-size: 2rem;
}
main h2 {
    font-size: 3.5rem;
    margin: 2rem 0;
    letter-spacing: 3px;
    font-family: 'Varela Round', sans-serif;
}
main p {
    max-width: 500px;
    margin: 0 auto;
    font-size: 1.25rem;
}
/*각 텍스트의 크기와 margin 지정하기 끝*/



/*버튼꾸미기*/
/* 보통 버튼은 [background-color: transparent] 로 배경을 투명하게 지정하고 시작하는 편이 좋음*/
/*버튼의 요소 내부와 외부에 간격을 주기 위해 padding과 margin설정하기*/
main button.download {
    /*스타일속성*/
    background-color: transparent;
    border: 3px solid white;
    padding: 1rem 2rem;
    border-radius: 20px;
    margin-top: 3rem;
    color: white;
    font-weight: bold;
    cursor: pointer;
}

main button.mouse {
    /*스타일속성*/
    background-color: transparent;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    
    /*위치속성*/
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);

    /*애니메이션속성*/
    animation: upDown 1s ease-in-out infinite;
}
/* 1초마다 위아래 움직이는 애니메이션 */
@keyframes upDown {
    0% { bottom: 1rem; }
    50% { bottom: 1.5rem; }
    100% { bottom: 1rem; }
}


/* 텍스트 타이핑 효과 구현을 위한 메인화면 텍스트 끝에 커서 모양 만들기
(메인 화면의 글자가 지워졌다가 다시 채워지는 기능) */
main h2 span::after {
    /*가상요소 선택자로 너비,높이,배경색 지정한 막대 만들기*/
    /*가상요소 선택자의 display 속성 지정하기*/
    content: "";
    height: 40px;
    width: 3px;
    background-color: #fff;
    display: inline-block;
    animation: blink 0.7s ease-in-out infinite;
}
/* 0.7초마다 깜박이는 애니메이션 */
@keyframes blink {
    0% { opacity: 1; }
    100% { opacity: 0; }
}



/*모든 섹션의 기본 적용값*/
section {
    font-family: 'Poppins', sans-serif;
    padding: 5rem 0;
}
section:nth-child(2n) {
    background-color: #f8f8f8;
}
section .title {
    margin-bottom: 3rem;
}
section .title h4 {
    font-size: 1.35rem;
    color: #ed4848;
}
section .title h2 {
    font-size: 3.5rem;
}
section .title p {
    font-size: 1.15rem;
}
/*모든 섹션의 기본 적용값 끝*/




/* section1_About me */
/* 
### 1. [본문 레이아웃] 하기
- <div class="left"> : image 첨부
- <div class="right"> : 소개글 작성 + social링크 첨부
- 본문은 텍스트와 이미지를 왼쪽과 오른쪽으로 나누고 있으므로,
- [float:left] , [float:right] 으로 요소 레이아웃을 분할하고, 
  각각 너비의 절반식 차지하도록 [width: 50%] 지정

- 그런데 float속성은 적용 대상의 원래 위치를 보장하지 않으므로,
  clear속성으로 float속성을 해제해야함

- 이미지는 자신을 감싸는 부모 요소의 크기를 넘기더라도 
  항상 원래 크기를 그대로 표시하려는 특징이 있으므로,
  [max-width속성]으로 이미지가 부모 요소의 너비보다 커지지 못하게 제한
*/
/*float속성해제*/
section .about-self::after {
    content: "";
    clear: both;
    display: block;
}

/*본문 너비 절반 지정 & 왼쪽 배치 */
section .about-self .left {
    width: 50%;
    float: left;
}

/*이미지 크기가 부모 영역을 넘지 않도록 부모 영역의 최대 크기로 지정*/
section .about-self .left img {
    max-width: 100%;
}

/*본문 너비 절반 지정 & 오른쪽 배치*/
section .about-self .right {
    width: 50%;
    float: left;
    padding: 0 2rem;
}



/*
### 2. [본문 세부 스타일] 작성
- 각 텍스트의 크기, 여백, 색 지정
- .social 내 a 내 i인 아이콘 폰트는 :
social 클래스를 가지고 있는 div 태그 하위에 a 태그로 감싼 형태임 
즉, 아래처럼 작성하면 아이콘 폰트가 텍스트처럼 취급되어 크기와 여백을 지정할 수 있음
*/
/*본문 오른쪽 h3 태그의 글자 크기와 여백 지정*/
section .about-self .right h3 {
    font-size: 2.25rem;
    margin-bottom: 1rem;
}

/*본문 오른쪽 h3 태그의 strong 태그 색상 강조*/
section .about-self .right h3 strong {
    color: #ed4848;
}

/*본문 오른쪽 p 태그의 크기와 여백 지정*/
section .about-self .right p {
    font-size: 1.15rem;
    margin: 1rem 0;
}

/*본문 오른쪽 p 태그 scroll 만들어주기*/
section .about-self .right .sentence {
    width: 100%;
    height: 220px;
    overflow: scroll;
}

/*본문 오른쪽의 아이콘 폰트 크기와 여백 지정*/
section .about-self .right .social a {
    font-size: 2.5rem;
    margin-right: 1.2rem;
}


/* section2_What I Do */
/*
### 1. [본문 레이아웃] 하기
- flexbox 이용하기
*/
section .do-me {
    display: flex;
    justify-content: space-between;
}

section .do-me .do-inner {
    background-color: #fff;
    width: 30%;
    padding: 2rem;
    cursor: pointer;
}

/*
### 2. [본문 세부 스타일] 작성
*/
/*아이콘 폰트 크기와 색상*/
section .do-me .do-inner .icon i {
    font-size: 2.5rem;
    color: #ff6a6a;
}

/*HTML5, CSS3, Bootstrap v5.0 텍스트 크기와 간격*/
section .do-me .do-inner .content h3 {
    font-size: 2rem;
    margin: 1rem 0;
}

/*사각형 텍스트 크기*/
section .do-me .do-inner .content p {
    font-size: 1.15rem;
}

/*do-inner 클래스에 마우스를 올리면 배경색과 텍스트 색상 변경*/
section .do-me .do-inner:hover {
    background-color: lightcoral;
    color: white;
}

/*do-inner 클래스에 마우스를 올리면 아이콘 폰트 색상 변경*/
section .do-me .do-inner:hover i {
    color: white;
}



/* section3_background */
.bg {
    background-image: url('https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1460&q=80');
    height: 650px;
    background-position: center;
    background-size: cover;
    background-attachment: fixed;
}




/* section4_PortFolio */
/*
### 1. [본문 레이아웃] 하기
*/
section .portfolio-me {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}

section .portfolio-me .portfolio-inner {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 30%;
    background-color: #f8f8f8;
    padding: 1rem 1rem 1.5rem 1rem;
    border: 1px solid #ccc;
    margin-bottom: 3rem;
}
/*
### 2. [본문 세부 스타일] 작성
*/
section .portfolio-me .portfolio-inner img {
    width: 250px;
    height: 300px;
    max-width: 100%; /*이미지 크기가 부모 영역을 넘지 않도록 부모 영역의 최대 크기로 지정*/
}

/*strong 태그 색상과 간격*/
section .portfolio-me .portfolio-inner strong {
    color: #ff6a6a;
    margin: 0.5rem 0;
}

/*h3 태그 색상과 간격*/
section .portfolio-me .portfolio-inner h3 {
    font-size: 1.75rem;
}


/* section5_Contact With Me */
/*
### 1. [본문 레이아웃] 하기 : 방법1. float 이용하기
*/
/* clear속성으로 float속성값 해제 */
/* section.contact .contact-me::after{
    content: "";
    display: block;
    clear: both;
}
section.contact .contact-me .left{
    width: 30%;
    float: left;
}
section.contact .contact-me .right{
    width: 65%;
    float: left;
    margin-left:5%;
} */

/*
### 1. [본문 레이아웃] 하기 : 방법2. flexbox 이용하기
*/
section.contact .contact-me {
    display: flex;
    justify-content: space-between;
}

section.contact .contact-me .left {
    width: 30%;
}

section.contact .contact-me .right {
    width: 65%;
}

/*
### 2. [본문 세부 스타일] 작성 - 영역본문 왼쪽 레이아웃
*/
section.contact .contact-me .left .card {
    border: 1px solid #ccc;
    padding: 1rem;
    margin-bottom: 1.25rem;
    display: flex;
    align-items: center;
}

section.contact .contact-me .left .card .icon i {
    font-size: 2rem;
    margin-right: 15px;
}

/*
### 2. [본문 세부 스타일] 작성 - 영역본문 오른쪽 레이아웃
*/
section.contact .contact-me .right form {
    display: flex;
    flex-direction: column;
    border: 1px solid #ccc;
    padding: 1rem;
}

section.contact .contact-me .right .form-group {
    margin-bottom: 1.25rem;
}

section.contact .contact-me .right .form-group label {
    display: block;
}

/*input요소, textarea요소, button요소 꾸미기*/
section.contact .contact-me .right .form-group input {
    width: 100%;
    padding: 10px;
    outline: none;
    border: 1px solid #ccc;
    border-radius: 10px;
}

section.contact .contact-me .right .form-group textarea {
    width: 100%;
    padding: 10px;
    resize: none;
    outline: none;
    border: 1px solid #ccc;
    border-radius: 10px;
}

section.contact .contact-me .right button {
    width: 100%;
    padding: 1rem;
    background-color: #f78b00;
    color: #fff;
    border: none;
}

/*요소에 커서가 활성화되면 파란색 테두리와 그림자 효과 추가*/
section.contact .contact-me .right .form-group input:focus {
    border: 1px solid #719ECE;
    box-shadow: 0 0 10px #719ECE;
}

section.contact .contact-me .right .form-group textarea:focus {
    border: 1px solid #719ECE;
    box-shadow: 0 0 10px #719ECE;
}

/*요소에 커서를 갖다대면 배경색 변경*/
section.contact .contact-me .right button:hover {
    background-color: #f7b55e;
}






/* 해상도 너비에 따른 CSS 코드를 작성해서 반응형 처리 하기 */
/*
### 1st 기준점 설정하기
- 해상도를 기준으로 서로 다른 css를 적용할 때 사용
- 기준이 되는 해상도 설정하기
- 1140px | 992px | 768px | 576px | 400px

### 2nd 반응형 코드 작성하기
html{
	font-size: 00px;
}
- 최종 프로젝트에서 [font-size,margin,padding] 속성은 전부 rem 단위를 사용함
- rem 단위는 root, 즉 html 태그의 [font-size] 속성값에 영향을 받는 단위임
- html 태그는 기본 font-size 속성값이 16px이므로 (1rem -> 16(px) × 1(rem) = 16px)
- 이러한 rem 단위의 특징을 이용해 
반응형이 적용되는 뷰포트마다 기준이 되는 html 태그의 font-size 속성값을 작게 하면 
화면 너비가 줄어들수록 전체 텍스트 크기와 내외부 여백이 일정 비율로 줄어듬
- 해상도의 너비가 992px보다 작아질 때부터 기준 [font-size] 속성값을 줄임
- 최종으로 너비가 400px 이하일 때 [font-size] 속성값은 11px이 되므로
똑같은 1rem 값이라고 해도 11(px) × 1(rem) = 11px로 계산됨
- 따라서 rem 단위로 작성한 수치는 화면 너비에 비례해 줄어듬
*/


/*1140px*/
@media screen and (max-width:1140px) {
    /*메인영역*/  
    main .container {
        width: 992px; /*container기준 너비 변경 1140px -> 992px*/
    }
    /*섹션영역*/ 
    section .container {
        width: 600px; /*container기준 너비 변경 (2단으로 처리하기 위한 적정 너비) 1140px -> 600px*/
    }

    /*About Me*/
    section .about-self .left {
        width: 100%; /*왼쪽 너비 50% -> 100% 변경*/
        margin-bottom: 1.5rem;
    }
    section .about-self .right {
        width: 100%; /*오른쪽 너비 50% -> 100% 변경*/
        padding: 0;
    }

    /*What I Do*/
    section .do-me {
        flex-wrap: wrap;
    }
    section .do-me .do-inner {
        width: 48%; /*본문 사각형 너비 30% -> 48% 변경*/
        margin-bottom: 1.5rem; /*본문 사각형 사이에 간격 지정*/
    }

    /*PortFolio*/
    section .portfolio-me .portfolio-inner {
        width: 48%; /*본문 사각형 너비 30% -> 48% 변경*/
        margin-bottom: 1.5rem; /*본문 사각형 사이에 간격 지정*/
    }

    /*Contact With Me*/
    section.contact .contact-me {
        display: flex;
        flex-direction: column;
    }
    section.contact .contact-me .left {
        width: 100%;
    }
    section.contact .contact-me .right {
        width: 100%;
    }
}

/*992px
- 비율유지
- 메인영역의 container클래스 너비 768로 변경
*/
@media screen and (max-width:992px) {
    html {
        font-size: 14px;
    }
    /*메인영역*/ 
    main .container {
        width: 768px; /*container기준 너비 변경 992px -> 768px*/
    }
}

/*768px
- 비율유지
- 메인영역의 container클래스 너비 576로 변경
- 섹션영역의 container클래스 너비 400로 변경
- What I do 영역의 본문 너비 변경
- PortFolio 영역의 본문 너비 변경
*/
@media screen and (max-width:768px) {
    html {
        font-size: 13px;
    }
    /*메인영역*/ 
    main .container {
        width: 576px; /*container기준 너비 변경 768px -> 576px*/
    }
    /*섹션영역*/ 
    section .container{
        width: 400px; /*container기준 너비 변경 600px -> 400px*/
    }

    /*What I Do*/
    section .do-me{
        display: flex;
        flex-direction: column;
    }
    section .do-me .do-inner{
        width: 100%;
        padding: 3rem;
    }

    /*PortFolio*/
    section .portfolio-me{
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    section .portfolio-me .portfolio-inner{
        width: 70%;
    }
}

/*576px
- 비율유지
- 메인영역의 container클래스 너비 400로 변경
- 섹션영역의 container클래스 너비 360로 변경
*/
@media screen and (max-width:576px) {
    html {
        font-size: 12px;
    }
    /*메인영역*/ 
    main .container {
        width: 400px; /*container기준 너비 변경 576px -> 400px*/
    }
    /*섹션영역*/  
    section .container {
        width: 360px; /*container기준 너비 변경 400px -> 360px*/
    }
}

/*400px
- 비율유지
- 메인영역의 container클래스 너비 300로 변경
- 섹션영역의 container클래스 너비 320로 변경
*/
@media screen and (max-width:400px) {
    html {
        font-size: 11px;
    }
    main .container {
        width: 300px;
    }
    section .container{
        width: 320px;
    }
    main h4{
        font-size: 1.5rem;
    }
    main .title h2{
        font-family: 3rem; /*3.5rem -> 3rem*/
    }
}


/*자바스크립트로 클래스를 추가하기 위한 기능 구현*/
header.active{
    background-color:rgba(0,0,0);
    animation:fadeIn 0.5s ease-in-out;
  }
  @keyframes fadeIn{
    0%{
      opacity:0;
    }
    100%{
      opacity:1;
    }
  }
